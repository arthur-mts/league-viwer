AWSTemplateFormatVersion: 2010-09-09
Description: >-
  basic-api
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  RIOTAPIKEY:
      Type: String
      Default: *****

  RIOTAPIBASEURL:
    Type: String
    Default: https://br.api.riotgames.com/lol
  
  JWTSECRET:
    Type: String
    Default: thatismybigsecret

Resources:
  API:
    Type: AWS::Serverless::Api
    Properties:
      Name: serverless-api
      StageName: dev
      Auth:
        Authorizers:     
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt authorizerFunction.Arn
        # DefaultAuthorizer: MyLambdaTokenAuthorizer
          
  ## TABLES
  Game:
    Type: AWS::Serverless::SimpleTable
    Properties:
        PrimaryKey:
          Name: id
          Type: String
        ProvisionedThroughput:
            ReadCapacityUnits: 2
            WriteCapacityUnits: 2

  User:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2


  ## FUNCTIONS

  authorizerFunction:
    Type: AWS::Serverless::Function
    Properties: 
      Handler: src/handlers/authorization.authorizationHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 500
      Environment:
        Variables:
          JWTSECRET: !Ref JWTSECRET
  getUserGamesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/getUserGames.getUserGamesHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 500
      Description: Função para capturar últimas partidas do usuário
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref User
      Environment:
        Variables:
          USER_TABLE: !Ref User
          GAME_TABLE: !Ref Game
          RIOTAPIBASEURL: !Ref RIOTAPIBASEURL
          RIOTAPIKEY: !Ref RIOTAPIKEY
      Events:
        Api:
          Type: Api
          Properties:
            Path: /games/{id}
            Method: GET
            RestApiId: !Ref API
            Auth:
              Authorizer: MyLambdaTokenAuthorizer
  createUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/createUser.createUserHandler
      Runtime: nodejs12.x
      MemorySize: 128
      Timeout: 500
      Description: Função para criar um user no banco de dados
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SampleTable
        - DynamoDBCrudPolicy:
            TableName: !Ref User
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref User
          RIOTAPIBASEURL: !Ref RIOTAPIBASEURL
          RIOTAPIKEY: !Ref RIOTAPIKEY
          JWTSECRET: !Ref JWTSECRET
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user
            Method: POST
            RestApiId: !Ref API
            

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
